#!/usr/bin/env python3

import sys
from time import sleep
from paho.mqtt import subscribe, publish
from argparse import ArgumentParser
from os import remove, environ
from wget import download
import subprocess
import json
from gnupg import GPG
from urllib.error import HTTPError
sys.path.append('/opt/ue-operator/logic')
from util import ProcessList, RepeatTimer, publish_tts

OPT = "/opt/ue-operator/"
GITHUB = "https://github.com/ubilab-ws21/operator/"
running_timer = None


def on_scale(client, userdata, message):
    """
    Listener for new messages in the scale mqtt topic

    :param client: The mqtt client
    :param userdata: User information
    :param message: The received message (message.payload / message.topic)
    :return: None
    """
    try:
        data = json.loads(message.payload.lower())
        if not (data["method"]
                and data["method"] == "status"
                and data["state"]
                and data["state"] in ["active", "inactive"]):
            return
        global running_timer
        if data["state"] == "active":
            gyro = "on"
            if not running_timer:
                publish_tts("Put the prototype back!")
                running_timer = RepeatTimer(5.0, publish_tts, args=("Put the prototype back!",))
                running_timer.start()
        else:
            gyro = "off"
            if running_timer:
                running_timer.cancel()
                running_timer = None
        publish.single("powermeter/switch", gyro, hostname="10.0.0.2")
    except json.JSONDecodeError:
        pass


if __name__ == "__main__":
    """
    This script controls the whole server logic
    Different commands allow options as updating from GitHub, starting and 
    initializing
    """
    parser = ArgumentParser(
        description='Command-line interface for the ubilab-ws21 operator')
    parser.add_argument('command', metavar='CMD', type=str,
                        choices=["init", "start", "update", "help"], nargs="?",
                        help='the command to execute\n(init, start)',
                        default="help")
    help_text = "definition of the workflow.\n" \
                "Format: module:class\n" \
                "with get method returning an array of Workflows."
    parser.add_argument("--workflow_def", "-d", help=help_text)
    parser.add_argument("--ignore-gpg", "-i", action="store_true", help="Skips GPG in update process")
    parser.add_argument("-v", "--version", action="version",
                        version="%(prog)s %VERSION%")
    args = parser.parse_args()
    pl = ProcessList()

    try:
        """
            Command INIT: Initializing requirements not fetched over apt  
             This includes cloning git repositories for camera relay and text-
             to-speech and installing the respective requirements.txt
        """
        if args.command == "init":
            pl.append(
                ["git", "clone", "https://github.com/ubilab-ws21/environment",
                 OPT + "environment"])
            pl.append(["git", "clone", "--recurse-submodules",
                       "https://github.com/OliverF/mjpeg-relay.git",
                       "/opt/mjpeg-relay"])
            pl.append(["sudo", "systemctl", "deamon-reload"])
            pl.wait()
            pl.append(
                ["python3", "-m", "pip", "install", "-r", "requirements.txt"],
                cwd=OPT + "environment/text_to_speech")
            pl.append(
                ["python", "-m", "pip", "install", "-r", "requirements.txt"],
                cwd="/opt/mjpeg-relay/")
            for i in range(1, 6):
                pl.append(["sudo", "systemctl", "enable", f"ue-camera@{i}.service"])
            pl.wait()

        """
            Command UPDATE: Updating git repos for the camera relay and text-to-
             speech and installing the newest release from GitHub
             This also checks the GPG signature of the release
        """
        if args.command == "update":
            pl.append(["git", "pull"], cwd=OPT + "environment")
            pl.append(["git", "pull"], cwd="/opt/mjpeg-relay")
            try:
                remove("ue-operator.deb")
                remove("ue-operator.deb.asc")
            except FileNotFoundError:
                pass
            try:
                download(GITHUB + "releases/latest/download/ue-operator.deb")
                print("")
                download(GITHUB + "releases/latest/download/ue-operator.deb.asc")
                print("")
            except HTTPError as e:
                print("Error downloading release files")
                print(str(e))
                exit(1)
            gpg = GPG(gnupghome=environ["HOME"] + "/.gnupg")
            with open("ue-operator.deb.asc", "rb") as sig:
                ver = gpg.verify_file(sig, "ue-operator.deb")
            if ver.trust_level is not None or args.i:
                if ver.trust_level >= ver.TRUST_FULLY:
                    print(f"Valid trusted GPG signature by {ver.username} "
                          f"with key {ver.key_id}")
                    install = True
                else:
                    print(f"Valid untrusted GPG signature by {ver.username} "
                          f"with key {ver.key_id}")
                    s = input("Do you want to continue anyway? y/N")
                    install = s.lower() == "y"
                if install:
                    pl.append(["sudo", "apt", "-qq", "install",
                               "./ue-operator.deb"])
                    pl.wait()
                    pl.append(["sudo", "systemctl", "daemon-reload"])
                    pl.wait()
                    pl.append(["sudo", "systemctl", "restart", "ue-operator.service"])
                    pl.append(["sudo", "systemctl", "restart", "ue-camera.target"])
                    pl.wait()
                else:
                    s = input("Do you want to keep the downloaded files? y/N")
                    if s.lower() == "y":
                        exit(0)
            else:
                print("Invalid GPG signature")
            remove("ue-operator.deb")
            remove("ue-operator.deb.asc")

        """
            Command START: Starting all services and scripts, including:
             text-to-speech, mosquitto, game logic, mqtt logging and the
             script for monitoring the scale
        """
        if args.command == "start":
            pl.append(
                ["python3", OPT + "environment/text_to_speech/main.py", "-c",
                 "/home/alexa/text_to_speech/text_to_speech.cfg"],
                stderr=subprocess.STDOUT
            )
            pl.append("mosquitto -c " + OPT + "mosquitto.conf | grep Error")
            sleep(1)
            logic_command = ["python3", OPT + "logic/main.py"]
            if args.workflow_def:
                logic_command.extend(["-d", args.workflow_def])
            pl.append(logic_command)
            pl.append("mosquitto_sub -t \\# -v | ts '%s' >"
                      "/var/log/mosquitto/message_log_"
                      "$(date +%Y-%m-%d_%H%M%S).txt")
            subscribe.callback(on_scale, "6/puzzle/scale", hostname="10.0.0.2")
            pl.wait()

        """
            Command HELP: Outputting the help message
        """
        if args.command == "help":
            print("Select a CMD to execute")
            parser.parse_args(["--help"])
            exit(1)
    except KeyboardInterrupt:
        for p in pl:
            try:
                p.terminate()
            except KeyboardInterrupt:
                pass
        print("Operator ended by user")
        exit(0)
